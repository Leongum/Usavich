<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.usavich.db.account.dao.impl.AccountMapper">

    <resultMap id="accountInfo" type="com.usavich.entity.account.UserInfo">
        <id column="USER_ID" property="userId"/>
        <result column="USER_EMAIL" property="userEmail"/>
        <result column="SEX" property="sex"/>
        <result column="NICK_NAME" property="nickName"/>
        <result column="UUID" property="uuid"/>
        <result column="LEVEL" property="level"/>
        <result column="SCORES" property="scores"/>
        <result column="EXPERIENCE" property="experience"/>
        <result column="MAX_POWER" property="maxPower"/>
        <result column="REMAINING_POWER" property="remainingPower"/>
        <result column="ENDURANCE" property="endurance"/>
        <result column="SPIRIT" property="spirit"/>
        <result column="RAPIDLY" property="rapidly"/>
        <result column="RECOVER_SPEED" property="recoverSpeed"/>
        <!-- <result column="BASE_ACC" property="baseAcc"/>
        <result column="INERTIA_ACC" property="inertiaAcc"/>
        <result column="CRIT" property="crit"/>
        <result column="LUCK" property="luck"/>-->
    </resultMap>

    <resultMap id="userFriendInfo" type="com.usavich.entity.account.UserFriend">
        <id column="USER_ID" property="userId"/>
        <result column="USER_EMAIL" property="userEmail"/>
        <result column="NICK_NAME" property="nickName"/>
        <result column="UUID" property="uuid"/>
        <result column="SEX" property="sex"/>
        <result column="FRIEND_ID" property="friendId"/>
        <result column="FRIEND_STATUS" property="friendStatus"/>
        <result column="ADD_TIME" property="addTime"/>
        <result column="LAST_LOCATION_CONTENT" property="lastLocationContent"/>
        <result column="LAST_LOCATION_POINT" property="lastLocationPoint"/>
        <result column="LAST_ACTIVE_TIME" property="lastActiveTime"/>
    </resultMap>

    <resultMap id="userLocation" type="com.usavich.entity.account.UserLocation">
        <id column="USER_ID" property="userId"/>
        <result column="USER_EMAIL" property="userEmail"/>
        <result column="NICK_NAME" property="nickName"/>
        <result column="UUID" property="uuid"/>
        <result column="SEX" property="sex"/>
        <result column="LAST_LOCATION_CONTENT" property="lastLocationContent"/>
        <result column="LAST_LOCATION_POINT" property="lastLocationPoint"/>
        <result column="LAST_ACTIVE_TIME" property="lastActiveTime"/>
    </resultMap>

    <sql id="accountInfoTable">
        U.USER_ID,
        U.USER_EMAIL,
        U.NICK_NAME,
        U.SEX,
        U.UUID,
        UD.SCORES,
        UD.LEVEL,
        UD.SCORES,
        UD.EXPERIENCE,
        UD.MAX_POWER,
        UD.REMAINING_POWER,
        UD.ENDURANCE,
        UD.SPIRIT,
        UD.RAPIDLY,
        UD.RECOVER_SPEED
        -- UD.BASE_ACC,
        -- UD.INERTIA_ACC,
        -- UD.CRIT,
        -- UD.LUCK
    </sql>

    <sql id="userFriendInfoTable">
        U.USER_EMAIL,
        U.NICK_NAME,
        U.SEX,
        U.UUID,
        UF.USER_ID,
        UF.FRIEND_ID,
        UF.FRIEND_STATUS,
        UF.ADD_TIME,
        UF.UPDATE_TIME
        UL.LAST_LOCATION_CONTENT,
        UL.LAST_LOCATION_POINT,
        UL.LAST_ACTIVE_TIME
    </sql>

    <sql id="userFriend">
        USER_ID,
        FRIEND_ID,
        FRIEND_STATUS,
        ADD_TIME,
        UPDATE_TIME
    </sql>

    <sql id="userLocationTable">
        U.USER_ID,
        U.USER_EMAIL,
        U.NICK_NAME,
        U.UUID,
        U.SEX,
        UL.LAST_LOCATION_CONTENT,
        UL.LAST_LOCATION_POINT,
        UL.LAST_ACTIVE_TIME
    </sql>

    <select id="getAccountInfo" resultMap="accountInfo">
        SELECT
        <include refid="accountInfoTable"/>
        FROM USER AS U
        INNER JOIN USER_DETAIL AS UD
        ON U.USER_ID = UD.USER_ID
        WHERE U.USER_EMAIL = #{userEmail}
        AND U.USER_PASSWORD = #{password}
    </select>

    <select id="getAccountInfoByMail" resultMap="accountInfo">
        SELECT
        <include refid="accountInfoTable"/>
        FROM USER AS U
        INNER JOIN USER_DETAIL AS UD
        ON U.USER_ID = UD.USER_ID
        WHERE U.USER_EMAIL = #{userEmail}
    </select>

    <insert id="createBase" parameterType="com.usavich.entity.account.UserBase" useGeneratedKeys="true"
            keyProperty="baseEntity.userId">
        INSERT INTO USER
        (
            USER_EMAIL,
            USER_PASSWORD,
            SEX,
            UUID,
            NICK_NAME
        )
        VALUES
        (
            #{baseEntity.userEmail},
            #{baseEntity.password},
            #{baseEntity.sex},
            #{baseEntity.uuid},
            #{baseEntity.nickName}
        )
    </insert>

    <insert id="createDetail" parameterType="com.usavich.entity.account.UserInfo">
        INSERT INTO USER_DETAIL
        (
          USER_ID,
          LEVEL,
          SCORES,
          EXPERIENCE,
          MAX_POWER,
          REMAINING_POWER,
          ENDURANCE,
          SPIRIT,
          RAPIDLY,
          RECOVER_SPEED
          -- BASE_ACC,
          -- CRIT,
          -- INERTIA_ACC,
          -- LUCK
        )
        VALUES
        (
          #{detailEntity.userId},
          #{detailEntity.level},
          #{detailEntity.scores},
          #{detailEntity.experience},
          #{detailEntity.maxPower},
          #{detailEntity.remainingPower},
          #{detailEntity.endurance},
          #{detailEntity.spirit},
          #{detailEntity.rapidly},
          #{detailEntity.recoverSpeed}
          -- #{detailEntity.baseAcc},
          -- #{detailEntity.crit},
          -- #{detailEntity.inertiaAcc},
          -- #{detailEntity.luck}
        );
    </insert>

    <select id="getAccountInfoByID" resultMap="accountInfo">
        SELECT
        <include refid="accountInfoTable"/>
        FROM USER AS U
        INNER JOIN USER_DETAIL AS UD
        ON U.USER_ID = UD.USER_ID
        WHERE U.USER_ID = #{userId}
    </select>

    <select id="getUserFriends" resultMap="userFriendInfo">
        SELECT
        <include refid="userFriendInfoTable"/>
        FROM USER_FRIEND AS UF
        INNER JOIN USER AS U
        ON UF.FRIEND_ID = U.USER_ID
        LEFT JOIN USER_LOCATION AS UL
        ON UF.FRIEND_ID = UL.USER_ID
        WHERE UF.USER_ID = #{userId}
        AND UPDATE_TIME > #{lastUpdateTime}
    </select>

    <select id="getUserFriend" resultMap="userFriendInfo">
        SELECT
        <include refid="userFriend"/>
        FROM USER_FRIEND
        WHERE USER_ID = #{userId}
        AND FRIEND_ID = #{friendId}
    </select>

    <insert id="createUserFriend" parameterType="com.usavich.entity.account.UserFriend">
        INSERT INTO USER_FRIEND
        (
            USER_ID,
            FRIEND_ID,
            FRIEND_STATUS,
            ADD_TIME,
            UPDATE_TIME,
        )
        VALUES
        (
            #{entity.userId},
            #{entity.friendId},
            #{entity.friendStatus},
            #{entity.addTime},
            #{entity.updateTime}
        )
    </insert>

    <update id="updateUserFriend" parameterType="com.usavich.entity.account.UserFriend">
         UPDATE USER_FRIEND
         SET
             FRIEND_STATUS = #{entity.friendStatus},
             UPDATE_TIME = #{entity.updateTime}
         WHERE USER_ID = #{entity.userId} AND FRIEND_ID = #{entity.friendId}
    </update>

    <update id="updateAccountInfo" parameterType="com.usavich.entity.account.UserInfo">
        UPDATE USER_DETAIL
        SET
            LEVEL = #{entity.level},
            SCORES = #{entity.scores},
            EXPERIENCE = #{entity.experience},
            MAX_POWER = #{detailEntity.maxPower},
            REMAINING_POWER = #{detailEntity.remainingPower},
            ENDURANCE = #{detailEntity.endurance},
            SPIRIT = #{detailEntity.spirit},
            RAPIDLY = #{detailEntity.rapidly},
            RECOVER_SPEED = #{detailEntity.recoverSpeed},
            -- BASE_ACC = #{entity.baseAcc},
            -- CRIT = #{entity.crit},
            -- INERTIA_ACC = #{entity.inertiaAcc},
            -- LUCK = #{entity.luck}
        WHERE USER_ID = #{entity.userId}
    </update>

    <update id="updateAccountPowerInfo">
        UPDATE USER_DETAIL
        SET
            REMAINING_POWER = #{remainingPower}
        WHERE USER_ID = #{userId}
    </update>

    <update id="updateAccountBase" parameterType="com.usavich.entity.account.UserBase">
        UPDATE USER
        SET
            USER_PASSWORD = #{entity.password},
            SEX = #{entity.sex},
            UUID = #{entity.uuid},
            NICK_NAME = #{entity.nickName}
        WHERE USER_ID = #{entity.userId}
        AND USER_EMAIL = #{entity.userEmail}
    </update>

    <select id="getUserLocation" resultMap="userLocation">
        SELECT
        <include refid="userLocationTable"/>
        FROM USER AS U
        LEFT JOIN USER_LOCATION AS UL
        ON U.USER_ID = UL.USER_ID
        WHERE U.USER_ID = #{userId}
    </select>

    <select id="getUserLocations" resultMap="userLocation">
        SELECT
        <include refid="userLocationTable"/>
        FROM USER AS U
        LEFT JOIN USER_LOCATION AS UL
        ON U.USER_ID = UL.USER_ID
    </select>

    <insert id="createUserLocation" parameterType="com.usavich.entity.account.UserLocation">
        INSERT INTO USER_LOCATION
        (
            USER_ID,
            LAST_LOCATION_CONTENT,
            LAST_LOCATION_POINT,
            LAST_ACTIVE_TIME
        )
        VALUES
        (
            #{entity.userId},
            #{entity.lastLocationContent},
            #{entity.lastLocationPoint},
            #{entity.lastActiveTime}
        )
    </insert>

    <update id="updateUserLocation" parameterType="com.usavich.entity.account.UserLocation">
         UPDATE USER_LOCATION
         SET
            LAST_LOCATION_CONTENT = #{entity.lastLocationContent},
            LAST_LOCATION_POINT = #{entity.lastLocationPoint},
            LAST_ACTIVE_TIME = #{entity.lastActiveTime}
         WHERE USER_ID = #{entity.userId}
    </update>
</mapper>
